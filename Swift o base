//
//  main.swift
//  swift 1-1
//
//  Created by qianfeng on 16/7/26.
//  Copyright © 2016年 马锦龙. All rights reserved.
//  数据类型

// import 导入头文件 （包含所有的头文件）
import Foundation

// swift 中输出语句是print 输出的内容使用""括起来 
// <1> swift 中定义变量和常量
// 变量：值可以修改的量
// 常量：值不能修改的量

// 定义格式：
/* 
    定义变量的关键字是var
    定义常量的关键字是let
    var（let）变量名称（常量名称）: 类型标注 = 初始值
 
    （1）变量和常量的命名规范
    变量和常量的命名可以选择喜欢的任何字符（汉字、图片），但是不能以数字开头，不能包含数学符号（+、—、*...），也不能是关键字
    （2）类型标注
    整数类型
        <1> 按照数字的表示范围划分：Int8、Int16、Int32、Int64
        print(Int8.min, Int8.max)
        <2> 按照有无符号划分：Int8 --- UInt8
        有符号包含负数 无符号是从0开始
        print(UInt8.min, UInt8.max)
        <3> 通常的情况不需要判断数据的范围大小 因为swift语言中提供了一种表  示整数的数据类型Int
        [注意] Int表示的数据范围和操作系统所占的位数有关
            即电脑是32位 那么Int = Int32 UInt = UInt32
            print(Int64.min, Int64.max, Int.min, Int.max)
        [结论] 变量或者常量使用前必须进行初始化（赋值）
*/

// 浮点数
/*
    [浮点数类型]
    单精度浮点数：Float
    双精度浮点数：Double 默认的浮点数的类型是Double类型
 */
// Float保留的有效数字（从左向右的第一个不是0的数字起，后面的数字都是有效数字）位数是六位
// Double保留额有效数字的位数是十五位
let dan: Float = 3.1415926545254332764762354672345265671
let shuang: Double = 3.1415926545254332764762354672345265671
print("dan的值是:", dan)
print("shuang的值是:", shuang)

// [字符串]
/*
    使用双引号括起来的多个字符 类型标注String
 */
var China: String = "中国"
let 中国: String = "中国"
let 🇨🇳: String = "中国"
print(China, 中国, 🇨🇳)
let C: CChar = 1

// [字符]
/*
    使用双引号括起来的单个字符 类型标注Character
 */
let char: Character = "H"
var 字符: Character = "字"
print(C, char, 字符)

// 可以隐式定义变量和常量（将类型标注缺省 让编译器自动判断标注类型）
// 如果没有类型标注 双引号括起来的字符无论多少都是字符串类型 若要声明字符需要声明类型

// 输出函数
/*
    双引号中需要打印值得时候 将打印目标加到 \( ) 中
    print 函数输出的内容自动换行 
    如果取消换行格式
 */
let result = 100
print("result结果是:", result)
print("result结果是: \(result)")
print("这句不换行", "分离", separator: "*", terminator: "结束")

// 元组
// 元组中可以存放多个不同类型的数据
// 元组如果是变量 那么元组中的数据可以任意修改
// 获取元组中某一个元素的值
// <1>根据下标获取
// <2>为元组的每一个内容附一个比变量或者常量
// 元组的数据类型只要定义了就不能对类型进行添加和删除操作，只能对元组内的元素进行修改 并且类型一定要和定义的元组的类型完全相同
// <3>为元组中的内容添加标注
/*-----------<1>----------*/
var tuples = ("WuKong", "Bangzi", 300)
print(tuples.1, tuples.2, tuples.0)

tuples.1 = "qunzi"
print("名字:\(tuples.0), 特点:\(tuples.1), 惩罚时间:\(tuples.2)")

/*-----------<2>----------*/
let (one, two, three) = ("1", 2, 3.0)
print("字符\(one), 整形\(two), 浮点\(three)")

// 对一些不关心的值进行跳过
let (me, _, _) = ("hu", 1, 2)

/*-----------<3>----------*/
var 元组 = (name: "悟空", time: 300, point: "裙子")
print(元组.name, 元组.1, 元组.point)

// 元组可以嵌套
let tuples_123 = (10, (1.1, "丟"))
print(tuples_123.1.1)

// Bool类型
/*
    Bool类型的数据只有两个值true和false
 */
var ball = 1 + 1 > 4 ?  2 : 3
print("ture")
// swift中的运算符
// <1> 赋值运算符 = 
// [结论] 无论是赋值运算符还是普通运算符 都是先算赋值号右侧再算左侧
var a = 10 // 将数字10赋给整形变量a  运算顺序从右向左
var sum = 0
sum += a
sum += a
sum /= sum + a
print(sum)

// <2> 算数运算符 +、-、*、/、%
// swift 是一门非常安全的语言 所以参与运算的数据必须是相同类型的数据 如果类型不一样必须手动进行强制转换
let num1 = 10
let num2 = 1.234
print(Double(num1) + num2)
print(Int(num2))
print(num2)
// 类型转化不会改变变量或者常量原有的数据类型和值

// 两个数相除 如果两个数都是整数那么结果取整（取商） 如果至少有一个为浮点型那么结果为真值
print(1 / 2.0)

// swift语言与其他语言不同 swift中的取余运算可以是两个浮点数求余
// 余数的符号与被除数的符号一致
print(3.5 % 2)




